#!/bin/bash

#=================================================
# GENERIC START
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source /usr/share/yunohost/helpers

# Install parameters are automatically saved as settings
#
# Settings are automatically loaded as bash variables
# in every app script context, therefore typically these will exist:
# - $domain
# - $path
# - $language
# ... etc
#
# Resources defined in the manifest are provisioned prior to this script
# and corresponding settings are also available, such as:
# - $install_dir
# - $port
# - $db_name
# ...

#
# $app is the app id (i.e. 'example' for first install, 
# or 'example__2', '__3', ... for multi-instance installs)
#

#=================================================
# APP "BUILD" (DEPLOYING SOURCES, VENV, COMPILING ETC)
#=================================================
# DOWNLOAD AND COMPILING THE DEPENDENCIES
#=================================================

ynh_script_progression --message="Compiling dependencies (this may take a while...)" --weight=15

# Downloading usbmuxd2
cd "$install_dir" && git clone https://github.com/jkcoxson/usbmuxd2
# Compiling usbmuxd2
cd usbmuxd2 && ./autogen.sh && make

#=================================================
# DOWNLOAD, CHECK AND UNPACK SOURCE
#=================================================
ynh_script_progression --message="Setting up source files..." --weight=1

# detect_arch comes from _common.sh / personnal helpers
architecture=$(detect_arch)

# Download, check integrity, uncompress and patch the source from app.src
ynh_setup_source --dest_dir="$install_dir"  --source_id="$architecture"

# $install_dir will automatically be initialized with some decent 
# permission by default ... however, you may need to recursively reapply
# ownership to all files such as after the ynh_setup_source step
chown -R $app:www-data "$install_dir"

#=================================================
# SYSTEM CONFIGURATION
#=================================================
ynh_script_progression --message="Adding system configurations related to $app ..." --weight=1

### `ynh_add_fpm_config` is used to set up a PHP config.
### You can remove it if your app doesn't use PHP.
### `ynh_add_fpm_config` will use the files conf/php-fpm.conf
### If you're not using these lines:
###		- You can remove these files in conf/.
###		- Remove the section "BACKUP THE PHP-FPM CONFIGURATION" in the backup script
###		- Remove also the section "REMOVE PHP-FPM CONFIGURATION" in the remove script
###		- As well as the section "RESTORE THE PHP-FPM CONFIGURATION" in the restore script
###		  with the reload at the end of the script.
###		- And the section "PHP-FPM CONFIGURATION" in the upgrade script

# Create a dedicated systemd config
ynh_add_systemd_config

yunohost service add $app --description="AltServer-Linux for YunoHost" --log="/var/log/$app/$app.log"

### Additional options starting with 3.8:
###
### --needs_exposed_ports "$port" a list of ports that needs to be publicly exposed
###                               which will then be checked by YunoHost's diagnosis system
###                               (N.B. DO NOT USE THIS is the port is only internal!!!)
###
### --test_status "some command"  a custom command to check the status of the service
###                               (only relevant if 'systemctl status' doesn't do a good job)
###
### --test_conf "some command"    some command similar to "nginx -t" that validates the conf of the service
###
### Re-calling 'yunohost service add' during the upgrade script is the right way
### to proceed if you later realize that you need to enable some flags that
### weren't enabled on old installs (be careful it'll override the existing
### service though so you should re-provide all relevant flags when doing so)

### `ynh_use_logrotate` is used to configure a logrotate configuration for the logs of this app.
### Use this helper only if there is effectively a log file for this app.
### If you're not using this helper:
###		- Remove the section "BACKUP LOGROTATE" in the backup script
###		- Remove also the section "REMOVE LOGROTATE CONFIGURATION" in the remove script
###		- As well as the section "RESTORE THE LOGROTATE CONFIGURATION" in the restore script
###		- And the section "SETUP LOGROTATE" in the upgrade script

# Use logrotate to manage application logfile(s)
ynh_use_logrotate

#=================================================
# GENERIC FINALIZATION
#=================================================
# START SYSTEMD SERVICE
#=================================================
ynh_script_progression --message="Starting a systemd service..." --weight=1

# Start a systemd service
ynh_systemd_action --service_name=$app --action="start" --log_path="/var/log/$app/$app.log"

#=================================================
# END OF SCRIPT
#=================================================
ynh_script_progression --message="Installation of $app completed" --last
